//
//  Item.swift
//  iShnakiOS
//
//  Created by Huw Williams on 07/04/2025.
//

// the name of the file and the class was generated by XCode.
import Foundation
import SwiftData

// MARK: - Models
@Model
final class UserData {
    @Attribute(.unique) var date: Date
    // Actuals
    var caloriesConsumed: Int
    var waterConsumedML: Int
    var stepsTaken: Int
    var amountofWater: Int
    var amountofBeverage: Int
    var amountofSnack: Int
    var amountofMeal: Int
    
    init() {
        
        self.date = Calendar.current.startOfDay(for: Date())
        self.caloriesConsumed = 0
        self.waterConsumedML = 0
        self.amountofWater = 0
        self.stepsTaken = 0
        self.amountofBeverage = 0
        self.amountofSnack = 0
        self.amountofMeal = 0
    }
}

@Model
class GoalDefaults {
    var calorieGoal: Int
    var mealGoal: Int
    var snackGoal: Int
    var BeverageGoal: Int
    var waterGoal: Int
    var cupSize: Int
    var stepGoal: Int
    
    init() {
        calorieGoal = 2000 // daily intake of an adult
        waterGoal = 4 // amount of glasses/bottles drunk in a day
        cupSize = 250 // the size of the water container
        mealGoal = 3 // breakfast/lunch/dinner
        snackGoal = 2 // amount of snacks in a day
        BeverageGoal = 2 // amount of coffee/soda in a day/
        stepGoal = 5000 // this is half the recommended daily step goal.
    }
}

// ensures that this record exists.
func ensureGoalDefaultsExist(context: ModelContext) {
    let existingDefaults = try? context.fetch(FetchDescriptor<GoalDefaults>())

    if existingDefaults?.isEmpty ?? true {
        let defaultGoals = GoalDefaults()
        context.insert(defaultGoals)
        try? context.save()
        print("Created default GoalDefaults object.")
    } else {
        print("GoalDefaults already exists.")
    }
}

// used to check that a record is available otherwise makes one.
func ensureTodayDataExists(context: ModelContext) {
    let calendar = Calendar.current
    let startOfToday = calendar.startOfDay(for: Date())
    let startOfTomorrow = calendar.date(byAdding: .day, value: 1, to: startOfToday)!

    let existing = try? context.fetch(FetchDescriptor<UserData>(
        predicate: #Predicate {
            $0.date >= startOfToday && $0.date < startOfTomorrow
        }
    ))

    if existing?.isEmpty ?? true {
        let newEntry = UserData()
        context.insert(newEntry)
        try? context.save()
        print("Created new UserData for today.")
    } else {
        print(" UserData for today already exists.")
    }
}

// Functions

func deleteOldRecords(context: ModelContext) {
    let cutoff = Calendar.current.date(byAdding: .day, value: -7, to: Date())!
    
    
    let request = FetchDescriptor<UserData>(
            predicate: #Predicate { $0.date < cutoff }
        )
        
        do {
            let oldRecords: [UserData] = try context.fetch(request)
            
            for record in oldRecords {
                context.delete(record)
            }

            try context.save()
        } catch {
            print("❌ Error deleting old metrics: \(error)")
        }
}
